DAY 1 - Documentation

ISA - INSTRUCTION SET ARCHITECTURE
* a language of the computer with which we interact with the sysytem
* if we have a Cprogram and if it wants to run on a hardware then in certain terms we need to pass it to the hardware
* so first it gets converted int ASSEMBLY LANGUAGE program , which is then converted into MACHINE LANGUAGE program which is the binary language
* the specifications i.e., the architecture will be implemented by some sort of RTL and will be loaded to the layout 
* above is called RTL to GDSII flow


APPLICATIONS to HARDWARE
*Application software enters into block called SYSTEM SOFTWARE , this converts the application software into binary language that can convey things to the Hardware
FLOW/LAYERS OF SYSTEM SOFTWARE
*Layers of system software are OS, Complier , Assembler
*OS-It handles memory , IO operation , allocates memory , and takes the App and converts it into assembly language program and the binary format along with the other jobs it do
*Compiler: The compiler takes in the C.,C++ or JAVA instructionns and convert them into set of instructions (instr1, instr2, instr3,....) a .exe file
the instructions that are getting compiled will depend vary based on the hardware into which it is going
Each hardware will have a specific Instruction set
*Assembler: the assembler will receive the instructions from the compilers output and converts them into respective binary language
and the binary when received by the hardware does the suitable and corresponding function

Instruction acts as an abstract interface between the C Code and the architecture and this is called the ARCHITECTURE OF THE COMPUTER

*A RTL will interpret the binary and they will be implemented into hardware 

RISC-V Software toolchain
LAB 1

step 1: in the terminal of the home directory give "gedit sum1ton.c"
step 2: in the opened file write the C code to calculate the sum from say 1 to 5
     #include <stdio.h>
     int main(){
     int i,sum=0,n=5;
     for(i=1:i<n;++i){
     sum+=i;
     }
     printf("sum of numbers from 1 to %d is %d",n,sum);
     }
step 3: save and close tghe above file
step 4: give the command "gcc sum1ton.c"
step 5: give command "./a.out" when we press enter we will get the output here" sum of numbers from 1 to 5 is 15"
step 6: "cat sum1ton.c" will show the contents of the file in the terminal itself


LAB 2

RISCV GCCCompile and Disassemble
step 1:compiling a program with RISCV GCC Compiler
the command is "riscv64-unknown-elf-gcc -O1 -mabi=lp64 -march=rv64i -o sum1ton.o sum1ton.c"
step2: this will generate a file like '-rwxr-xr-x 1 vsduser serial.no month date time sum1ton.o' and this can be 
viewed by the command "ls -ltr sum1ton.o"
step3: go to another tab , now we are going to see the assembly code for the c code that we wrote
the command is "riscv64-unknown-elf-objdump -d sum1ton.o" pressing enter will give us bunch of assembly code
step 4:"riscv64-unknown-elf-objdump -d sum1ton.o | less" and give enter we will again get a bunch of assembly code
in the bottom we will have " : " this symbol blinking and here if we type for anything and if that is present
in the so generated assembly code it will be highlighted and shown.
step 5:"riscv64-unknown-elf-gcc -Ofast -mabi=lp64 -march=rv64i -o sum1ton.o sum1ton.c" press enter 
again we will get bunch of assembly code

LAB 3

Spike Simulation And Debug
step 1: "spike pk sum1ton.o" this will also give us the same result as "./a.out"
step 2: now opening a debugger in spike give the command "spike -d pk sum1ton.o"
the above will open a spike debugger and " : " will blink
step 3: if we want the pc to run till certain instruction automatically we give "until pc 0 100b0"
give enter 
step 4: now to see the content of the register give "reg 0 a2" when we give enter it will give the coontent of the 
register a2
step 5: if we press enter it will run the next instruction that is present after the address 100b0 , that is instruction at 100b4

Integer Number representation
*entire 64 bit will be called as DOUBLEWORD (2 words= ddoubleword) (8 byte= doubleword)
*32 bit is called word( 4 byte = word)
*8 bit is called a byte
*16 bits is called as doublebyte
*total number of patterns with n bits is (2^n)-1

ways to repersent negative(signed) numbers
* we will use 2's complement technique
* for +ve number MSB=0
* for -ve number MSB=1
and we call this bit as sign bit
*range of +ve numbers 0 t0 01111111111....1(followed by 63 1's) i.e.,9223372036854775807 dec
*range of -ve numbers -9223372036854775808 which is (-2^63) to -1
*instructions that operates on these kinds of integers are called BASE INTEGER INSTRUCTIONS RV64I

LAB - For Signed and Unsigned Numbers

step 1: "vim unsignedHighest.c"
step 2: the c program is 
#include <stdio.h>
#include <math.h>
int main(){
unsigned long long int max = (unsigned long long int)(pow(2,64)-1);
printf("highest number represented by long long int is %llu\n",max);
return 0;
}

to save and quit at the bottom of the file we need to type "wq"
step 3: "riscv64-unknown-elf-gcc -Ofast -mabi=lp64 -march=rv64i -o unsignedHighest.o unsignedHighest.c"
step 4: "spike pk unsignedHighest.o" when we press enter we wwill get the output of the code
step 5: say if we had something within 2^64-1 the we will get the output as it is , but if it were greater 
then we will be all cases get 18446744073709551615 which is (2^64)-1, now for an unsigned long long type if we 
try to force some negative number , no matter what it will be at 0 , and will not drop below that
step 6: to show negative number we need to have the data type as just "long long"


integer data type
unsigned int - 4 byte - format specifier %u
int - 4 byte - format specifier %d
unsigned long long int - 8 byte - format specifier %llu
long long int - 8 byte - %iid


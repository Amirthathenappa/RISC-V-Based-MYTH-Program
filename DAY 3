DAY 3
https://github.com/stevehoover/RISC-V_MYTH_Workshop

*Logic gates - fundamental building blocs of digital circuits
*we have Boolean Arithmetic, Boolean Calc , verilog etc.. depending on the type the representation of the digital logic will change
this can be seen in fig 3

*implementation of a multiplexer
assign f=s?x1:x2;
*chaining ternary operators fig 4

*type "makerchip" in the browser , go into makerchip.com and launch an IDE
*in the IDE from the top slect the tutorials and there we can see various designs 
*and now we are going to choose FPGA Multiplier

LAB- For combinational Logic
step 1: open makerchip
step 2:click IDE
step 3: open tutorials , validity tutorial 
step 4: in tutorial , click "load pythagorean Example"

LAB- Making an inverter
step 1: open "examples" under tutorial
step 2:Load "Makerchip default template"
step 3:in line 16 , instead of // ,type "$out = ! $in1 ;" note the space are very important 
note we need not declare $out and $in like in verilog 
output of the above code is shown in fig5 of the document
step 4: to compile press "E Menu"

LAB-Operating on vectors
* $out[4:0] creates a "vector" of 5 bits
*trying out 
$out[4:0] = $in1[3:0] + $in2[3:0];
result in fig 6

*Multiplexer in fig 7

*combinational calculator

*SEQUENTIAL LOGIC 
*they are sequenced using clock signal
*D FF transitions next state to current state on a rising clock edge
and the circuit is constructed to enter a known state in response to a reset signal
*the whole circuit seq+ comb can be viewed as a big state machine
*fibonacci series  fig 9, fig 10   code line "   $num[31:0] = $reset ? 1 : (>>1$num + >>2$num);
" we can see that >>1$num is previous of $num , and >>2$num is the previous previous of num
* free running counter " $num[31:0] = $reset ? 1 : (>>1$num + >>2$num);"


VALUES IN VERILOG
*no.of_bits'character_depicting_the_format Value   ex: 16'hf0
*'0  : All 0s (width based on context)
*'X : All dont care bits
1   : 32-bit (signed ) 1

*Our simulator will zero extend or truncate when widths are mismatched (without warning)
*uses 2-state simulation(no X'z)


PIPELINE
* learning with the help of Pythagoras theorem fig 11
*pipelining will help us to run our clock faster


IDENTIFIERS & TYPES
*Type of an identifier is determined by symbol prefix and case/delinitation styple
example $symbolPrefix_delimitation( symbol prefix is one token , and the delimitation is another token)   example   $pipe_signal
*First token must start with two alpha characters , and if both of them are in lowe case then it is a PIPE SIGNAL
if first alpha is uppper case and the second one is lower case then it is called CamelCase and the signal is STATE SIGNAL ( technically we call this Pascal case)
if both the first and the second character are in upper case then this is a KEYWORD SIGNAL
*Numbers end token
$base64_value: good
$bad_name_5 : bad

Numberic identifier
>>1  means ahead by 1
